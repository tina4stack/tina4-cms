<div id="contentEditor" class="form-control" style="height:300px">{{ data.content | raw }}</div>
<script>
    function saveContent(editor) {
        $('#saveContent').val(editor.getContent());
    }

    var tinyEditor = null;

    tinymce.execCommand('mceRemoveEditor', false, 'contentEditor');

    tinymce.PluginManager.add('suggest-text', function (editor) {
        editor.ui.registry.addMenuItem('chat-gpt', {
            icon: 'text',
            text: 'AI Enhance',
            onAction: function () {
               let selectedText = tinymce.activeEditor.selection.getContent({format: 'text'});
                fetch('/cms/page-builder/open-ai?prompt=' + selectedText)
                    .then(async function (response) {
                        const data = await response.text();

                        let node = tinymce.activeEditor.selection.getNode();
                        node.innerHTML = data;
                        saveContent(tinyEditor);

                    });
            }
        });
    });

    tinymce.PluginManager.add('suggest-image', function (editor) {
        editor.ui.registry.addMenuItem('chat-gpt-image', {
            icon: 'image',
            text: 'AI Image',
            onAction: function () {
                let selectedText = tinymce.activeEditor.selection.getContent({format: 'text'});
                fetch('/cms/page-builder/open-ai?prompt=' + selectedText+'&image=true')
                    .then(async function (response) {
                        const data = await response.text();

                        let node = tinymce.activeEditor.selection.getNode();
                        node.innerHTML = data;
                        saveContent(tinyEditor);
                    });
            }
        });
    });



    tinymce.init({
        selector: '#contentEditor',
        contextmenu: "chat-gpt chat-gpt-image | link image inserttable | cell row column deletetable",
        contextmenu_never_use_native: true,
        plugins: 'suggest-text suggest-image preview importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap pagebreak nonbreaking anchor insertdatetime advlist lists wordcount help charmap quickbars emoticons',
        //toolbar: 'undo redo | bold italic underline strikethrough | fontfamily fontsize blocks | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl',
        toolbar_sticky: true,
        toolbar: 'undo redo fontsize bold italic forecolor backcolor styles alignleft aligncenter alignright alignjustify numlist bullist outdent indent image media emoticons menuSnippets menuArticles | fullscreen ',
        images_upload_url: '/cms/upload?formToken={{ formToken | raw }}',
        images_upload_base_path: '/uploads/',
        images_upload_credentials: true,
        forced_root_block: 'p',
        visualblocks_default_state: true,
        convert_urls: false,
        height: 500,
        extended_valid_elements:'div[*]',
        valid_children: '+div[div]',
        importcss_append: true,
        content_css: '/css/default.css',
        style_formats_merge: true,
        style_formats_autohide: true,
        promotion: false,
        file_picker_callback:   function(callback, url, type, win) {
            myWindow = popupCenter({url: "/cms/file-browser?formToken={{ formToken | raw }}", title: 'Tina4CMS - File Browser', w: 900, h: 500});
            myWindow.tinymceCallback = callback;
        },
        setup:function(editor) {
            tinyEditor = editor;

            editor.on('change', function(e) {
                saveContent(editor)
            });
            console.log('Adding snippets ');
            editor.ui.registry.addMenuButton('menuSnippets', {
                text: 'Snippets',
                fetch: function (callback) {
                    const items = [
                        {% for snippet in snippets %}
                        {
                            type: 'menuitem',
                            text: '{{ snippet.name }}',
                            onAction: function (_) {
                                editor.insertContent('\n\{\{ include( getSnippet("{{ snippet.name }}") ) \}\}');
                            }
                        },
                        {% endfor %}
                    ];
                    callback(items);
                }
            });
        }
    });
    console.log('Initializing editor');
    // Prevent Bootstrap dialog from blocking focusin
    document.addEventListener('focusin', (e) => {
        if (e.target.closest(".tox-tinymce-aux, .moxman-window, .tam-assetmanager-root") !== null) {
            e.stopImmediatePropagation();
        }
    });

</script>
<textarea id="saveContent" class="form-control" style="display:none; height: 300px" name="content">{{ data.content | raw }}</textarea>